def tabla_porcentajes(tabla,colores = ["#FFFF40", "#FFDE6F", "#ECAA1C", "#E72C07", "#900B02"]):
    # poner el plano
    fig, ax = plt.subplots(figsize=(12, 4))
    rows = 5
    cols = 12
    # delimitar el sistema coordenadas, un buffer por visualizacion
    ax.set_ylim(-0.75, rows-1)
    ax.set_xlim(-3.75, cols * 2 + .25)
    # poner los valores de los ultimos tres meses
    for fila in range(0, 3):
        f = tabla.tail(3).iloc[fila]
        for i in range(0, 24, 2):
            if i == 0:
                x = -1.5
                texto = f.iloc[i // 2]
            elif 2 < i <= 12:
                x = i + 1
                texto = "{:.1f}".format(f.iloc[i // 2])
            else:
                x = i + 0.5
                texto = "{:.1f}".format(f.iloc[i // 2])

            ax.text(x, y=2 - fila, s=texto, va='center', ha='center', fontsize=13)

    # sacar los nombres de las columnas
    column_names_lvl0 = list(tabla.columns.get_level_values(0))
    column_names_lvl1 = list(tabla.columns.get_level_values(1))
    # poner los titulos de categoria acumulada y segregada
    ax.text(10.5, 3.25, column_names_lvl0[0], weight='bold', ha='center')
    ax.text(18.5, 3.25, column_names_lvl0[-1], weight='bold', ha='center')

    # poner titulos de cada columna
    for i in range(0, 24, 2):
        if i == 0:
            x = -1.5
        elif i == 2:
            x = i
        elif 2 < i <= 12:
            x = i + 1
        else:
            x = i + 0.5
        ax.text(x, 2.75, column_names_lvl1[i // 2], weight='bold', ha='center')

    # formato de tabla
    # colores de celdas: clasificacion

    x = 4
    for cuadro in range(0, 10):
        if cuadro < 4:
            rect = mpatches.Rectangle((x, 2.55), 2, 0.6, ec='none', fc=colores[cuadro], alpha=.75, zorder=-1)
            ax.plot([x, x], [-0.5, 3], ls=':', lw='.5', c='grey')
            x += 2
        elif cuadro == 4:
            rect = mpatches.Rectangle((x, 2.55), 1.5, 0.6, ec='none', fc=colores[cuadro], alpha=.75, zorder=-1)
            ax.plot([x, x], [-0.5, 3], ls=':', lw='.5', c='grey')
            x += 1.5
        else:
            rect = mpatches.Rectangle((x, 2.55), 2, 0.6, ec='none', fc=colores[cuadro - 5], alpha=.75, zorder=-1)
            ax.plot([x, x], [-0.5, 3], ls=':', lw='.5', c='grey')
            x += 2

        ax.add_patch(rect)

    # lineas entre filas
    for row in range(rows - 1):
        ax.plot([-3.15, 23.5], [row - 0.5, row - 0.5], ls=':', lw='.5', c='grey')
    #lineas solidas de borde
    ax.plot([13.5, 13.5], [-0.5, 3.75], ls='solid', lw='.5', c='grey')
    ax.plot([23.5, 23.5], [-0.5, 3.75], ls='solid', lw='.5', c='black')
    ax.plot([-3.15, -3.15], [-0.5, 3.75], ls='solid', lw='.5', c='black')
    ax.plot([-3.15, 23.5], [3.75, 3.75], ls='solid', lw='.5', c='black')
    ax.plot([-3.15, 23.5], [-0.5, -0.5], ls='solid', lw='.5', c='black')
    ax.axis('off')
    nombre_tabla="tabla_de_datos.png"
    plt.savefig(nombre_tabla, bbox_inches='tight', pad_inches=0)
    return nombre_tabla